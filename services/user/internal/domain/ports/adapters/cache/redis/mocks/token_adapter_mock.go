// Code generated by MockGen. DO NOT EDIT.
// Source: token.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockTokenAdapter is a mock of TokenAdapter interface.
type MockTokenAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockTokenAdapterMockRecorder
}

// MockTokenAdapterMockRecorder is the mock recorder for MockTokenAdapter.
type MockTokenAdapterMockRecorder struct {
	mock *MockTokenAdapter
}

// NewMockTokenAdapter creates a new mock instance.
func NewMockTokenAdapter(ctrl *gomock.Controller) *MockTokenAdapter {
	mock := &MockTokenAdapter{ctrl: ctrl}
	mock.recorder = &MockTokenAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenAdapter) EXPECT() *MockTokenAdapterMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockTokenAdapter) Del(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockTokenAdapterMockRecorder) Del(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockTokenAdapter)(nil).Del), ctx, userID)
}

// Get mocks base method.
func (m *MockTokenAdapter) Get(ctx context.Context, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTokenAdapterMockRecorder) Get(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTokenAdapter)(nil).Get), ctx, userID)
}

// Set mocks base method.
func (m *MockTokenAdapter) Set(ctx context.Context, userID, refreshToken string, expiresIn time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, userID, refreshToken, expiresIn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockTokenAdapterMockRecorder) Set(ctx, userID, refreshToken, expiresIn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockTokenAdapter)(nil).Set), ctx, userID, refreshToken, expiresIn)
}
